#include<stdio.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<signal.h>
#include<stdlib.h>
#include<unistd.h>

void Deadchild(int signo){
	if(signo==SIGCHLD){
		int status;
		int i=waitpid(-1,&status,WNOHANG);
		printf("%d\n",i);
	} else if(signo==SIGINT){
		printf("I was tired!\n");
	}
}



int main(){

	signal(SIGINT,Deadchild);                            //depends on signal passed the func is called                     
	signal(SIGCHLD,SIG_IGN);                             // 
	int i;
	for(i=0;i<2;i++){
		int k=fork();
		if(k==0){
			printf("C1, PID: %d\n",getpid());
			sleep(1);
			printf("Hi I am still alive! \n");
			exit(0);
		}
	}
	//	raise(SIGTSTP);                  

	int l=sleep(10);
	if(l==0)
		printf("I had a good dream :-) for 12 seconds !\n");
	else 
		printf("It was only %d seconds dream :-( \n",12-l);

	return 0;
}

/* raise() returns 0 on success, and nonzero for failure.
 The  raise()  function sends a signal to the calling process or thread.

***************?????********************************************************************
void signalHandler( int signum )                                          //accepts signal number as argument
{
    cout << "Interrupt signal (" << signum << ") received.\n";

    // cleanup and close up stuff here  
    // terminate program  

   exit(signum);  

}

int main ()
{
    int i = 0;
    // register signal SIGINT and signal handler  
    signal(SIGINT, signalHandler);  

    while(++i){
       cout << "Going to sleep...." << endl;
       if( i == 3 ){
          raise(SIGINT);
       }
       sleep(1);
    }

    return 0;
}
*/
